package main

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"time"

	_ "<%= opts.PackagePkg %>/a"
	_ "<%= opts.ActionsPkg %>"
	<%= if (opts.WithGrifts) { %>
	_ "<%= opts.GriftsPkg %>"
	<% } %>
<%= if (opts.WithPop) { %>
	"<%= opts.ModelsPkg %>"
	"<%= opts.PackagePkg %>/migrations"
<% } %>

	"github.com/gobuffalo/buffalo/runtime"
	"github.com/gobuffalo/grift/grift"
<%= if (opts.WithPop) { %>
	"github.com/gobuffalo/pop/v6"
<% } %>
)

func init() {
	t, err := time.Parse(time.RFC3339, "<%= buildTime %>")
	if err != nil {
		fmt.Println(err)
	}

	runtime.SetBuild(runtime.BuildInfo{
		Version: "<%= buildVersion %>",
		Time:    t,
	})
}

func main() {
	args := os.Args
	var originalArgs []string
	for i, arg := range args {
		if arg == "--" {
			originalArgs = append([]string{args[0]}, args[i+1:]...)
			args = args[:i]
			break
		}
	}

	if len(args) == 1 {
		if len(originalArgs) != 0 {
			os.Args = originalArgs
		}
		originalMain()
		return
	}

	c := args[1]
	switch c {
<%= if (opts.WithPop) { %>
	case "migrate":
	migrate()
<% } %>
	case "version":
	printVersion()
	case "task", "t", "tasks":
	if len(args) < 3 {
		log.Fatal("not enough arguments passed to task")
	}

	c := grift.NewContext(args[2])
	if len(args) > 2 {
		c.Args = args[3:]
	}

	if err := grift.Run(args[2], c); err != nil {
		log.Fatal(err)
	}
	default:
	if _, err := exec.LookPath("buffalo"); err != nil {
		log.Fatal(err)
	}

	cmd := exec.Command("buffalo", args[1:]...)
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	if err := cmd.Run(); err != nil {
		log.Fatal(err)
	}
	}
}

func printVersion() {
	fmt.Printf("<%= opts.Name.Title() %> version %s\n", runtime.Build())
}

<%= if (opts.WithPop) { %>
func migrate() {
	box, err := pop.NewMigrationBox(migrations.FS(), models.DB)
	if err != nil {
		log.Fatalf("Failed to unpack migrations: %s", err)
	}

	if err := box.Up(); err != nil {
	log.Fatalf("Failed to run migrations: %s", err)
	}
}
<% } %>
